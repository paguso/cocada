#ifndef KWAYRNG_H
#define KWAYRNG_H

#include <stddef.h>

/**
 * @file kwayrng.h
 * @brief k-way independent random number generator.
 * This generator generates k-way independent random numbers in the field 
 * Z/pZ={0,...,p-1} where p is a prime.
 * The values are generated by evaluating a polynomial with degree in Z/pZ
 * with randomly chosen coefficients.
 * The description of this r.n.g. requires O(k*lg(p)) bits of space to
 * store the polynomial coefficients. In practice, these values are stored 
 * as 64-bit unsigned values.
 * @author Paulo Fonseca, Nivan Ferreira Jr
 */

typedef struct _kwayrng kwayrng;

/**
 * @brief Creates a new k-way independent r.n.g. for generating values
 * of @p nbits bits. In practice, the values will be generated in 
 * Z/pZ = {0,..., p-1} where p is the smallest prime greater or
 * equal to 2^@p nbits-1, that is, p is the smallest prime s.t.
 * Z/pZ contains all the @p nbits-bit values.
 * The created r.n.g will generate a pseudorandom k-way independent
 * sequence of values in Z/pZ. Each call to kwayrng_next() yields the
 * next value of the sequence. A call to kwayrng_reset() restarts the
 * sequence.
 * 
 * @param k The order of independence.  
 * @param nbits The size of the generated values in bits. This value
 * should range from 1 to 63.
 * 
 * @warning A fatal error occurs if not 0 < @p nbits < 64.
 */
kwayrng *kwayrng_new(size_t k, size_t nbits);


/**
 * @brief Creates a k-way independent r.n.g. with given polynomial
 * coefficients. 
 * @param (**NO TRANSFER**) coefs The polynomial coefficients. Values are considered
 * modulo the appropriate max value (`p`) computed from @p nbits.
 */
kwayrng *kwayrng_new_with_coefs(size_t k, uint64_t *coefs, size_t nbits);


/**
 * @brief Returns the k-value of the k-way independent r.n.g.
 */
size_t kwayrng_k(kwayrng *rng);


/**
 * @brief Returns the k polynomial coefficients of the r.n.g.
 */
const uint64_t *kwayrng_coefs(kwayrng *rng);


/**
 * @brief Returns the number `p` of distinct values generated by
 * @p rng. This number `p` is always prime.
 * @see kwayrng_new
 * @see kwayrng.h
 */
uint64_t kwayrng_maxval(kwayrng *rng);


/**
 * @brief Restarts the sequence of values generated by @p rng.
 */
void kwayrng_reset(kwayrng *rng);


/**
 * @brief Yelds the next random value in the sequence.
 */
uint64_t kwayrng_next(kwayrng *rng);


#endif